name: Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.0"

      # Cache Terraform providers
      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Install jq (in case it's not available)
      - name: Install jq
        run: sudo apt-get install jq

      # Import existing resource group
      - name: Import Existing Resource Group
        run: |
          export TF_LOG=DEBUG
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          terraform import azurerm_resource_group.example /subscriptions/$SUBSCRIPTION_ID/resourceGroups/example-resources
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      # Run Terraform Plan
      - name: Terraform Plan
        run: |
          export TF_LOG=DEBUG
          terraform plan -out=tfplan
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}  # Add this line for secret
          TF_VAR_azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}  # Map secret to the variable

      # Run Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}  # Add this line for secret
          TF_VAR_azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}  # Map secret to the variable

